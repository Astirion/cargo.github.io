'use strict';

let travelers = [];
let senders = [];

const travelerForm = document.getElementById('travelerForm');
const senderForm = document.getElementById('senderForm');
const matchList = document.getElementById('matchList');
const noMatches = document.getElementById('noMatches');

// Dropdown elements
const routesBtn = document.getElementById('routesBtn');
const ordersBtn = document.getElementById('ordersBtn');
const routesDropdown = document.getElementById('routesDropdown');
const ordersDropdown = document.getElementById('ordersDropdown');
const routesList = document.getElementById('routesList');
const ordersList = document.getElementById('ordersList');

// –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
let routesFilter = { from: '', to: '' };
let ordersFilter = { from: '', to: '' };

async function loadData() {
  try {
    const apiBase = 'http://localhost:5000';
    const [travelersRes, sendersRes] = await Promise.all([
      fetch(`${apiBase}/api/travelers`).then(r => r.json()),
      fetch(`${apiBase}/api/senders`).then(r => r.json())
    ]);
    travelers = travelersRes;
    senders = sendersRes;
    findMatches();
    updateRoutesList();
    updateOrdersList();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞:', err);
    noMatches.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ C# API –Ω–∞ http://localhost:5115';
  }
}

travelerForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  const data = new FormData(travelerForm);
  const from = data.get('from').trim();
  const to = data.get('to').trim();
  const weight = parseFloat(data.get('weight'));
  const reward = parseInt(data.get('reward'));

  if (!from || !to || isNaN(weight) || isNaN(reward) || weight <= 0 || reward < 0) {
    alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    return;
  }

  const newTraveler = { from, to, weight, reward };

  try {
    const apiBase = 'http://localhost:5000';
    const response = await fetch(`${apiBase}/api/travelers`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(newTraveler)
    });

    if (response.ok) {
      const saved = await response.json();
      travelers.push(saved);
      travelerForm.reset();
      findMatches();
      updateRoutesList();
      alert(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω: ${from} ‚Üí ${to}`);
    } else {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞.');
    }
  } catch (err) {
    alert('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ C# API –∑–∞–ø—É—â–µ–Ω.');
    console.error(err);
  }
});

senderForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  const data = new FormData(senderForm);
  const from = data.get('from').trim();
  const to = data.get('to').trim();
  const weight = parseFloat(data.get('weight'));
  const desc = (data.get('description') || '').toString().trim() || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';

  if (!from || !to || isNaN(weight) || weight <= 0) {
    alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    return;
  }

  const newSender = { from, to, weight, description: desc };

  try {
    const apiBase = 'http://localhost:5000';
    const response = await fetch(`${apiBase}/api/senders`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(newSender)
    });

    if (response.ok) {
      const saved = await response.json();
      senders.push(saved);
      senderForm.reset();
      findMatches();
      updateOrdersList();
      alert(`‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ–±–∞–≤–ª–µ–Ω: ${from} ‚Üí ${to}`);
    } else {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.');
    }
  } catch (err) {
    alert('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ C# API –∑–∞–ø—É—â–µ–Ω.');
    console.error(err);
  }
});

function findMatches() {
  matchList.innerHTML = '';
  let hasMatches = false;

  senders.forEach(sender => {
    travelers.forEach(traveler => {
      const fromMatch = sender.from.toLowerCase() === traveler.from.toLowerCase();
      const toMatch = sender.to.toLowerCase() === traveler.toLowerCase();
      const weightOk = sender.weight <= traveler.weight;

      if (fromMatch && toMatch && weightOk) {
        const li = document.createElement('li');
        li.innerHTML = `
          <strong>üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞:</strong> ${sender.from} ‚Üí ${sender.to} (${sender.weight} –∫–≥)<br>
          <strong>üí∏ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</strong> ${traveler.reward} ‚ÇΩ<br>
          <small>üí¨ ${sender.description}</small>
        `;
        matchList.appendChild(li);
        hasMatches = true;
      }
    });
  });

  noMatches.style.display = hasMatches ? 'none' : 'block';
}

// Dropdown functionality
function toggleDropdown(button, dropdown) {
  const isActive = button.classList.contains('active');
  
  // Close all dropdowns
  document.querySelectorAll('.dropdown-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  document.querySelectorAll('.dropdown-content').forEach(content => {
    content.classList.remove('show');
  });
  
  // Toggle current dropdown
  if (!isActive) {
    button.classList.add('active');
    dropdown.classList.add('show');
  }
}

// Event listeners for dropdown buttons
routesBtn.addEventListener('click', () => {
  toggleDropdown(routesBtn, routesDropdown);
  // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
  updateRoutesList();
});

ordersBtn.addEventListener('click', () => {
  toggleDropdown(ordersBtn, ordersDropdown);
  // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
  updateOrdersList();
});

// Close dropdowns when clicking outside
document.addEventListener('click', (e) => {
  if (!e.target.closest('.dropdown')) {
    document.querySelectorAll('.dropdown-btn').forEach(btn => {
      btn.classList.remove('active');
    });
    document.querySelectorAll('.dropdown-content').forEach(content => {
      content.classList.remove('show');
    });
  }
});

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ---

function filterAndSort(items, filter) {
  // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–æ –∏ –ø–æ—Å–ª–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const from = (filter.from || '').trim().toLowerCase();
  const to = (filter.to || '').trim().toLowerCase();
  return items
    .filter(item =>
      (!from || item.from.toLowerCase().includes(from)) &&
      (!to || item.to.toLowerCase().includes(to))
    )
    .sort((a, b) => {
      const aStr = `${a.from.toLowerCase()} ${a.to.toLowerCase()}`;
      const bStr = `${b.from.toLowerCase()} ${b.to.toLowerCase()}`;
      return aStr.localeCompare(bStr);
    });
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ ---

function updateRoutesList() {
  routesList.innerHTML = '';

  const filtered = filterAndSort(travelers, routesFilter);

  if (filtered.length === 0) {
    routesList.innerHTML = '<li class="empty-message">–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤</li>';
    return;
  }

  filtered.forEach(traveler => {
    const li = document.createElement('li');
    li.className = 'route-item';
    li.innerHTML = `
      <strong>${traveler.from} ‚Üí ${traveler.to}</strong><br>
      <small>–ú–∞–∫—Å. –≤–µ—Å: ${traveler.weight} –∫–≥ | –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: ${traveler.reward} ‚ÇΩ</small>
    `;
    routesList.appendChild(li);
  });
}

function updateOrdersList() {
  ordersList.innerHTML = '';

  const filtered = filterAndSort(senders, ordersFilter);

  if (filtered.length === 0) {
    ordersList.innerHTML = '<li class="empty-message">–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</li>';
    return;
  }

  filtered.forEach(sender => {
    const li = document.createElement('li');
    li.className = 'order-item';
    li.innerHTML = `
      <strong>${sender.from} ‚Üí ${sender.to}</strong><br>
      <small>–í–µ—Å: ${sender.weight} –∫–≥ | ${sender.description}</small>
    `;
    ordersList.appendChild(li);
  });
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ ---

function setupDropdownFilters() {
  // –î–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
  const routesFromInput = document.getElementById('routesFilterFrom');
  const routesToInput = document.getElementById('routesFilterTo');
  routesFromInput.addEventListener('input', e => {
    routesFilter.from = e.target.value;
    updateRoutesList();
  });
  routesFromInput.addEventListener('keyup', e => {
    routesFilter.from = e.target.value;
    updateRoutesList();
  });
  routesToInput.addEventListener('input', e => {
    routesFilter.to = e.target.value;
    updateRoutesList();
  });
  routesToInput.addEventListener('keyup', e => {
    routesFilter.to = e.target.value;
    updateRoutesList();
  });

  // –î–ª—è –∑–∞–∫–∞–∑–æ–≤
  const ordersFromInput = document.getElementById('ordersFilterFrom');
  const ordersToInput = document.getElementById('ordersFilterTo');
  ordersFromInput.addEventListener('input', e => {
    ordersFilter.from = e.target.value;
    updateOrdersList();
  });
  ordersFromInput.addEventListener('keyup', e => {
    ordersFilter.from = e.target.value;
    updateOrdersList();
  });
  ordersToInput.addEventListener('input', e => {
    ordersFilter.to = e.target.value;
    updateOrdersList();
  });
  ordersToInput.addEventListener('keyup', e => {
    ordersFilter.to = e.target.value;
    updateOrdersList();
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  updateRoutesList();
  updateOrdersList();
}

document.addEventListener('DOMContentLoaded', () => {
  loadData();
  setupDropdownFilters();
});


